#! /bin/sh

set -e
{% if proxy_env is defined %}
{% for k, v in proxy_env.items() %}
export {{k}}={{v}}
{% endfor %}
{% endif %}
# Some local names to prevent typos
vault_password_file=~/.vault-password
repo_dir=repo

# Go to the home directory
cd ~

# Install prerequsite packages
env ASSUME_ALWAYS_YES=YES pkg install ansible git sudo

# vagrant build will not use ansible pull on the jails (as it is better to just update on demand each jail)
{% if is_vagrant|default(False) %}
# bootstrap access for vagrant user
if [ ! -d /home/vagrant ]
then
pw useradd -n vagrant -s /bin/sh -m -G wheel
echo '%wheel ALL=(ALL) NOPASSWD: ALL' >> /usr/local/etc/sudoers
fi
# root ssh keys is copied at the jail setup, and must be copied to this user
cp -rf /root/.ssh /home/vagrant
chown -R vagrant /home/vagrant/.ssh
{% else %}
# Ansible only runs locally, so clone the repository there
git clone --depth 1 --branch master {{ ansible_git_repository }} ${repo_dir}

# Prepare the vault password file (we do not want it to show in the 'ps'
# output); make sure it's only readable by root.
old_umask=$(umask)
umask 077
cat > ${vault_password_file} <<-'EOF'
{{ vault_password }}
EOF
umask ${old_umask}

# Run local.yml.  This will take care of the real setup
(cd ${repo_dir}; ansible-playbook --vault-password-file=${vault_password_file} local.yml)

# Undo the damage we caused
rm -rf ${repo_dir} ${vault_password_file}
{% endif %}

touch /root/.run-once
