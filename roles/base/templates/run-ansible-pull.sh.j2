#! {{ '/usr/local/bin/bash' if ansible_distribution == 'FreeBSD' else '/bin/bash' }}

set -e

# set some environment variables that ansible-pull needs
export HOME=/home/{{ service_account }}
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/games:/usr/local/sbin:/usr/local/bin:/home/{{ service_account }}/bin

# set up to gather output
OUTPUT_DIR=$(mktemp -d /tmp/ansible-pull.XXXXXXXX) || exit 1
RETRY_LOG=$OUTPUT_DIR/retries.$$.log
ANSIBLE_LOG=$OUTPUT_DIR/ansible-pull.log

# retry controls
RETRIES=5
RETRY=0

while [[ $RETRY -lt $RETRIES ]]; do
    RETRY=$((RETRY + 1))

    # Run ansible-pull from the directory containing the repository (and, thus, the inventory file)
    # When running manually from custom branch, add "--skip-tags ansible-pull" to not revert to
    # master branch mid-execution.
    cd /home/{{ service_account}}/repo
    set +e
    timeout -k 2m 40m ansible-pull  \
        -C master \
        -d /home/{{ service_account }}/repo/ \
        -m git \
        -U {{ ansible_git_repository }} \
        -i localhost \
        --vault-password-file=/home/{{ service_account }}/.vault-password \
        -l "localhost,$(hostname),127.0.0.1" \
        local.yml >$ANSIBLE_LOG 2>&1
    RESULT=$?
    set -e

    if [[ $RESULT -eq 0 ]]; then
        break
    else
        echo '==== RETRYING ====' >> $RETRY_LOG
        sleep 30
    fi
done

if [[ $RESULT -eq 0 ]]; then
    # If everything was okay, check for deprecations but only at the 00:* run.
    # These deprecation warnings will happen on every run so only notify once a
    # day. The -A3 seems to be enough to get all/most of the deprecation
    # warning to make sense of what to fix.
    HOUR=$(date +%H)
    if [[ $HOUR == 00 ]]; then
        grep -A3 '\[DEPRECATION WARNING\]' $ANSIBLE_LOG
    fi
else
    cat $RETRY_LOG
    echo "ansible-pull run on on "$(uname -n)" failed."
    echo
    cat $ANSIBLE_LOG
fi

rm -r "$OUTPUT_DIR"

# clean up temp files
find /home/{{ service_account }}/.ansible/tmp -type d -mtime +1 -delete 2>&1 | grep -v 'Permission denied'
